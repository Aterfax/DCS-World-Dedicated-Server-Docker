#!/usr/bin/with-contenv bash
# shellcheck shell=bash

# Define a logging function to prefix output to the docker logs.
output_to_log() {
    sed  's/^/[s6-init-dcs-server-autostart-longrun] /'
}

# Set up error handling
handle_error() {
    local exit_code="$?"
    echo -e "Error occurred (Exit code: $exit_code)"  | output_to_log
    exit "$exit_code"
}
trap handle_error ERR

# Get / set timeout value for server check interval.
AUTOSTART="${AUTOSTART:-0}"
TIMEOUT="${TIMEOUT:-30}"

if [ "$AUTOSTART" -ne 1 ]; then
    echo "Error: AUTOSTART is not set to 1. Server will not autostart. Exiting." | output_to_log
    sleep $TIMEOUT
    exit 1
fi

network_vault_path="/config/.wine/drive_c/users/abc/Saved Games/DCS.openbeta_server/Config/network.vault"
if [ ! -f "$network_vault_path" ]; then
    echo "Error: File '$network_vault_path' does not exist. Cannot autostart without user logging in and saving credentials for autologin. Exiting." | output_to_log
    sleep $TIMEOUT
    exit 1
fi

install_folder_path="/config/.wine/drive_c/Program Files/Eagle Dynamics"
if [ ! -d "$install_folder_path" ]; then
    echo "No installation detected. Cannot autostart. Exiting" | output_to_log
    sleep $TIMEOUT
    exit 1
fi

while true; do
startup_iterator=1
pid=""
    if [ $startup_iterator -eq 1 ]; then
        echo "Starting DCS Server" | output_to_log
        sudo -E -u abc wine '/config/.wine/drive_c/Program Files/Eagle Dynamics/DCS World OpenBeta Server/bin/DCS_server.exe' &
        pid=$! # This grabs the PID of the running Sneaker process and keeps it for later if needed.
        echo "Server PID="$pid | output_to_log
        startup_iterator=0
        #echo "Sleeping: $TIMEOUT"
        sleep $TIMEOUT
    fi

    while true; do
        # Check if the service is still alive.
        if ps -p "$pid" > /dev/null; then
            echo "############### Server still running. ###############" $(date +"%d-%m-%y-%T") | output_to_log
            #echo "Sleeping: $TIMEOUT"
            sleep $TIMEOUT
        else
            startup_iterator=1
            restarts=$((restarts + 1))
            break # Restart server
        fi
    done
done
