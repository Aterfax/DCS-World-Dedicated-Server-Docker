#!/usr/bin/with-contenv bash
# shellcheck shell=bash

# Source the log helper after setting the prefix
log_prefix="s6-init-dcs-server-autostart-longrun"
source /app/dcs_server/logger_function

# Set up error handling
handle_error() {
    local exit_code="$?"
    echo -e "Error occurred (Exit code: $exit_code)"  
    exit "$exit_code"
}
trap handle_error ERR

# Source DCS Dirs finder helper
# This sets the following variables:
# DCS_saved_games_dir_open_beta
# DCS_saved_games_dir_release
# DCS_install_dir_openbeta
# DCS_install_dir_release
source /app/dcs_server/find_dcs_dirs_function

# Get / set timeout value for server check interval.
AUTOSTART="${AUTOSTART:-0}"
TIMEOUT="${TIMEOUT:-30}"

if [ "$AUTOSTART" -ne 1 ]; then
    echo "Error: AUTOSTART is not set to 1. Server will not autostart. Exiting." 
    sleep $TIMEOUT
    exit 1
fi

network_vault_path="${DCS_saved_games_dir_release}/Config/network.vault"
if [ ! -f "$network_vault_path" ]; then
    echo "Error: File '$network_vault_path' does not exist. Cannot autostart without user logging in and saving credentials for autologin. Exiting." 
    sleep $TIMEOUT
    exit 1
fi

install_folder_path="/config/.wine/drive_c/Program Files/Eagle Dynamics"
if [ ! -d "$install_folder_path" ]; then
    echo "No installation detected. Cannot autostart. Exiting" 
    sleep $TIMEOUT
    exit 1
fi

while true; do
startup_iterator=1
pid=""
    if [ $startup_iterator -eq 1 ]; then
        DCS_Misson_scripting_lua_path="${DCS_install_dir_release}/Scripts/MissionScripting.lua"
        if [ -f "$DCS_Misson_scripting_lua_path" ]; then
            echo "Deactivating sanitizeModule"
            sed -i "s/sanitizeModule('os')//g" "$DCS_Misson_scripting_lua_path"
            sed -i "s/sanitizeModule('io')//g" "$DCS_Misson_scripting_lua_path"
            sed -i "s/sanitizeModule('lfs')//g" "$DCS_Misson_scripting_lua_path"
            sed -i "s/_G\['require'\] = nil//g" "$DCS_Misson_scripting_lua_path"
            sed -i "s/_G\['loadlib'\] = nil//g" "$DCS_Misson_scripting_lua_path"
            sed -i "s/_G\['package'\] = nil//g" "$DCS_Misson_scripting_lua_path"
        fi

        DDCS_BubbleMaps_Path="/config/.wine/drive_c/users/abc/Saved Games/DCS.release_server/bubbleMaps"
        if [ ! -d "$DDCS_BubbleMaps_Path" ]; then
          echo "Creating Symbolic Linked BubbleMaps"
          ln -s "/config/DDCS/missions" "$DDCS_BubbleMaps_Path"
        fi

        echo "Starting DCS Server" 
        sudo -E -u abc wine "${DCS_install_dir_release}/bin/DCS_server.exe" &
        pid=$! # This grabs the PID of the running Sneaker process and keeps it for later if needed.
        echo "Server PID="$pid 
        startup_iterator=0
        #echo "Sleeping: $TIMEOUT"
        sleep $TIMEOUT
    fi

    while true; do
        # Check if the service is still alive.
        if ps -p "$pid" > /dev/null; then
            echo "############### Server still running. ###############" $(date +"%d-%m-%y-%T") 
            #echo "Sleeping: $TIMEOUT"
            sleep $TIMEOUT
        else
            startup_iterator=1
            restarts=$((restarts + 1))
            break # Restart server
        fi
    done
done
